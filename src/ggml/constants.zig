// This is a Zig translation of the Python code that defines a mapping from MODEL_TENSOR to string sequences.
// The original Python relies on enums and dictionaries with tuple values, translated here using enums and struct literals.

const std = @import("std");

pub const ModelArch = enum {
    LLAMA,
    DECI,
    FALCON,
    BAICHUAN,
    GROK,
    GPT2,
    GPTJ,
    GPTNEOX,
    MPT,
    STARCODER,
    REFACT,
    BERT,
    NOMIC_BERT,
    JINA_BERT_V2,
    BLOOM,
    STABLELM,
    QWEN,
    QWEN2,
    QWEN2MOE,
    QWEN2VL,
    PHI2,
    PHI3,
    PLAMO,
    CODESHELL,
    ORION,
    INTERNLM2,
    MINICPM,
    MINICPM3,
    GEMMA,
    GEMMA2,
    GEMMA3,
    STARCODER2,
    RWKV6,
    MAMBA,
    XVERSE,
    COMMAND_R,
    COHERE2,
    DBRX,
    OLMO,
    OLMO2,
    OLMOE,
    OPENELM,
    ARCTIC,
    DEEPSEEK,
    DEEPSEEK2,
    CHATGLM,
    BITNET,
    T5,
    T5ENCODER,
    JAIS,
    NEMOTRON,
    EXAONE,
    GRANITE,
    GRANITE_MOE,
    CHAMELEON,
    WAVTOKENIZER_DEC,
};

pub const ModelArchNames = struct {
    const Self = @This();

    pub const map = std.enums.EnumMap(ModelArch, []const u8).init(.{
        .LLAMA = "llama",
        .DECI = "deci",
        .FALCON = "falcon",
        .BAICHUAN = "baichuan",
        .GROK = "grok",
        .GPT2 = "gpt2",
        .GPTJ = "gptj",
        .GPTNEOX = "gptneox",
        .MPT = "mpt",
        .STARCODER = "starcoder",
        .REFACT = "refact",
        .BERT = "bert",
        .NOMIC_BERT = "nomic-bert",
        .JINA_BERT_V2 = "jina-bert-v2",
        .BLOOM = "bloom",
        .STABLELM = "stablelm",
        .QWEN = "qwen",
        .QWEN2 = "qwen2",
        .QWEN2MOE = "qwen2moe",
        .QWEN2VL = "qwen2vl",
        .PHI2 = "phi2",
        .PHI3 = "phi3",
        .PLAMO = "plamo",
        .CODESHELL = "codeshell",
        .ORION = "orion",
        .INTERNLM2 = "internlm2",
        .MINICPM = "minicpm",
        .MINICPM3 = "minicpm3",
        .GEMMA = "gemma",
        .GEMMA2 = "gemma2",
        .GEMMA3 = "gemma3",
        .STARCODER2 = "starcoder2",
        .RWKV6 = "rwkv6",
        .MAMBA = "mamba",
        .XVERSE = "xverse",
        .COMMAND_R = "command-r",
        .COHERE2 = "cohere2",
        .DBRX = "dbrx",
        .OLMO = "olmo",
        .OLMO2 = "olmo2",
        .OLMOE = "olmoe",
        .OPENELM = "openelm",
        .ARCTIC = "arctic",
        .DEEPSEEK = "deepseek",
        .DEEPSEEK2 = "deepseek2",
        .CHATGLM = "chatglm",
        .BITNET = "bitnet",
        .T5 = "t5",
        .T5ENCODER = "t5encoder",
        .JAIS = "jais",
        .NEMOTRON = "nemotron",
        .EXAONE = "exaone",
        .GRANITE = "granite",
        .GRANITE_MOE = "granitemoe",
        .CHAMELEON = "chameleon",
        .WAVTOKENIZER_DEC = "wavtokenizer-dec",
    });

    pub fn get(arch: ModelArch) []const u8 {
        return map.get(arch).?;
    }
};
pub const ModelTensor = enum {
    TOKEN_EMBD,
    TOKEN_EMBD_NORM,
    TOKEN_TYPES,
    POS_EMBD,
    OUTPUT,
    OUTPUT_NORM,
    ROPE_FREQS,
    ROPE_FACTORS_LONG,
    ROPE_FACTORS_SHORT,
    ATTN_Q,
    ATTN_K,
    ATTN_V,
    ATTN_QKV,
    ATTN_OUT,
    ATTN_NORM,
    ATTN_NORM_2,
    ATTN_OUT_NORM,
    ATTN_POST_NORM,
    ATTN_ROT_EMBD,
    FFN_GATE_INP,
    FFN_GATE_INP_SHEXP,
    FFN_NORM,
    FFN_PRE_NORM,
    FFN_POST_NORM,
    FFN_GATE,
    FFN_DOWN,
    FFN_UP,
    FFN_ACT,
    FFN_NORM_EXP,
    FFN_GATE_EXP,
    FFN_DOWN_EXP,
    FFN_UP_EXP,
    FFN_GATE_SHEXP,
    FFN_DOWN_SHEXP,
    FFN_UP_SHEXP,
    FFN_EXP_PROBS_B,
    ATTN_Q_NORM,
    ATTN_K_NORM,
    LAYER_OUT_NORM,
    SSM_IN,
    SSM_CONV1D,
    SSM_X,
    SSM_DT,
    SSM_A,
    SSM_D,
    SSM_OUT,
    TIME_MIX_W1,
    TIME_MIX_W2,
    TIME_MIX_LERP_X,
    TIME_MIX_LERP_K,
    TIME_MIX_LERP_V,
    TIME_MIX_LERP_R,
    TIME_MIX_LERP_G,
    TIME_MIX_LERP_W,
    TIME_MIX_FIRST,
    TIME_MIX_DECAY,
    TIME_MIX_DECAY_W1,
    TIME_MIX_DECAY_W2,
    TIME_MIX_KEY,
    TIME_MIX_VALUE,
    TIME_MIX_RECEPTANCE,
    TIME_MIX_GATE,
    TIME_MIX_LN,
    TIME_MIX_OUTPUT,
    CHANNEL_MIX_LERP_K,
    CHANNEL_MIX_LERP_R,
    CHANNEL_MIX_KEY,
    CHANNEL_MIX_RECEPTANCE,
    CHANNEL_MIX_VALUE,
    ATTN_Q_A,
    ATTN_Q_B,
    ATTN_KV_A_MQA,
    ATTN_KV_B,
    ATTN_Q_A_NORM,
    ATTN_KV_A_NORM,
    FFN_SUB_NORM,
    ATTN_SUB_NORM,
    DEC_ATTN_NORM,
    DEC_ATTN_Q,
    DEC_ATTN_K,
    DEC_ATTN_V,
    DEC_ATTN_OUT,
    DEC_ATTN_REL_B,
    DEC_CROSS_ATTN_NORM,
    DEC_CROSS_ATTN_Q,
    DEC_CROSS_ATTN_K,
    DEC_CROSS_ATTN_V,
    DEC_CROSS_ATTN_OUT,
    DEC_CROSS_ATTN_REL_B,
    DEC_FFN_NORM,
    DEC_FFN_GATE,
    DEC_FFN_DOWN,
    DEC_FFN_UP,
    DEC_OUTPUT_NORM,
    ENC_ATTN_NORM,
    ENC_ATTN_Q,
    ENC_ATTN_K,
    ENC_ATTN_V,
    ENC_ATTN_OUT,
    ENC_ATTN_REL_B,
    ENC_FFN_NORM,
    ENC_FFN_GATE,
    ENC_FFN_DOWN,
    ENC_FFN_UP,
    ENC_OUTPUT_NORM,
    CLS, // classifier
    CLS_OUT, // classifier output projection
    CONV1D,
    CONVNEXT_DW,
    CONVNEXT_NORM,
    CONVNEXT_PW1,
    CONVNEXT_PW2,
    CONVNEXT_GAMMA,
    POSNET_CONV1,
    POSNET_CONV2,
    POSNET_NORM,
    POSNET_NORM1,
    POSNET_NORM2,
    POSNET_ATTN_NORM,
    POSNET_ATTN_Q,
    POSNET_ATTN_K,
    POSNET_ATTN_V,
    POSNET_ATTN_OUT,
};

pub const TensorNames = struct {
    const Self = @This();

    pub const map = std.enums.EnumMap(ModelTensor, []const u8).init(.{
        .TOKEN_EMBD = "token_embd",
        .TOKEN_EMBD_NORM = "token_embd_norm",
        .TOKEN_TYPES = "token_types",
        .POS_EMBD = "position_embd",
        .OUTPUT_NORM = "output_norm",
        .OUTPUT = "output",
        .ROPE_FREQS = "rope_freqs",
        .ROPE_FACTORS_LONG = "rope_factors_long",
        .ROPE_FACTORS_SHORT = "rope_factors_short",
        .ATTN_NORM = "blk.{}.attn_norm",
        .ATTN_NORM_2 = "blk.{}.attn_norm_2",
        .ATTN_QKV = "blk.{}.attn_qkv",
        .ATTN_Q = "blk.{}.attn_q",
        .ATTN_K = "blk.{}.attn_k",
        .ATTN_V = "blk.{}.attn_v",
        .ATTN_OUT = "blk.{}.attn_output",
        .ATTN_ROT_EMBD = "blk.{}.attn_rot_embd",
        .ATTN_Q_NORM = "blk.{}.attn_q_norm",
        .ATTN_K_NORM = "blk.{}.attn_k_norm",
        .ATTN_OUT_NORM = "blk.{}.attn_output_norm",
        .ATTN_POST_NORM = "blk.{}.post_attention_norm",
        .FFN_GATE_INP = "blk.{}.ffn_gate_inp",
        .FFN_GATE_INP_SHEXP = "blk.{}.ffn_gate_inp_shexp",
        .FFN_NORM = "blk.{}.ffn_norm",
        .FFN_PRE_NORM = "blk.{}.ffn_norm",
        .FFN_POST_NORM = "blk.{}.post_ffw_norm",
        .FFN_GATE = "blk.{}.ffn_gate",
        .FFN_DOWN = "blk.{}.ffn_down",
        .FFN_UP = "blk.{}.ffn_up",
        .FFN_GATE_SHEXP = "blk.{}.ffn_gate_shexp",
        .FFN_DOWN_SHEXP = "blk.{}.ffn_down_shexp",
        .FFN_UP_SHEXP = "blk.{}.ffn_up_shexp",
        .FFN_ACT = "blk.{}.ffn",
        .FFN_NORM_EXP = "blk.{}.ffn_norm_exps",
        .FFN_GATE_EXP = "blk.{}.ffn_gate_exps",
        .FFN_DOWN_EXP = "blk.{}.ffn_down_exps",
        .FFN_UP_EXP = "blk.{}.ffn_up_exps",
        .FFN_EXP_PROBS_B = "blk.{}.exp_probs_b",
        .LAYER_OUT_NORM = "blk.{}.layer_output_norm",
        .SSM_IN = "blk.{}.ssm_in",
        .SSM_CONV1D = "blk.{}.ssm_conv1d",
        .SSM_X = "blk.{}.ssm_x",
        .SSM_DT = "blk.{}.ssm_dt",
        .SSM_A = "blk.{}.ssm_a",
        .SSM_D = "blk.{}.ssm_d",
        .SSM_OUT = "blk.{}.ssm_out",
        .TIME_MIX_W1 = "blk.{}.time_mix_w1",
        .TIME_MIX_W2 = "blk.{}.time_mix_w2",
        .TIME_MIX_LERP_X = "blk.{}.time_mix_lerp_x",
        .TIME_MIX_LERP_K = "blk.{}.time_mix_lerp_k",
        .TIME_MIX_LERP_V = "blk.{}.time_mix_lerp_v",
        .TIME_MIX_LERP_R = "blk.{}.time_mix_lerp_r",
        .TIME_MIX_LERP_G = "blk.{}.time_mix_lerp_g",
        .TIME_MIX_LERP_W = "blk.{}.time_mix_lerp_w",
        .TIME_MIX_FIRST = "blk.{}.time_mix_first",
        .TIME_MIX_DECAY = "blk.{}.time_mix_decay",
        .TIME_MIX_DECAY_W1 = "blk.{}.time_mix_decay_w1",
        .TIME_MIX_DECAY_W2 = "blk.{}.time_mix_decay_w2",
        .TIME_MIX_KEY = "blk.{}.time_mix_key",
        .TIME_MIX_VALUE = "blk.{}.time_mix_value",
        .TIME_MIX_RECEPTANCE = "blk.{}.time_mix_receptance",
        .TIME_MIX_GATE = "blk.{}.time_mix_gate",
        .TIME_MIX_LN = "blk.{}.time_mix_ln",
        .TIME_MIX_OUTPUT = "blk.{}.time_mix_output",
        .CHANNEL_MIX_LERP_K = "blk.{}.channel_mix_lerp_k",
        .CHANNEL_MIX_LERP_R = "blk.{}.channel_mix_lerp_r",
        .CHANNEL_MIX_KEY = "blk.{}.channel_mix_key",
        .CHANNEL_MIX_RECEPTANCE = "blk.{}.channel_mix_receptance",
        .CHANNEL_MIX_VALUE = "blk.{}.channel_mix_value",
        .ATTN_Q_A = "blk.{}.attn_q_a",
        .ATTN_Q_B = "blk.{}.attn_q_b",
        .ATTN_KV_A_MQA = "blk.{}.attn_kv_a_mqa",
        .ATTN_KV_B = "blk.{}.attn_kv_b",
        .ATTN_Q_A_NORM = "blk.{}.attn_q_a_norm",
        .ATTN_KV_A_NORM = "blk.{}.attn_kv_a_norm",
        .ATTN_SUB_NORM = "blk.{}.attn_sub_norm",
        .FFN_SUB_NORM = "blk.{}.ffn_sub_norm",
        .DEC_ATTN_NORM = "dec.blk.{}.attn_norm",
        .DEC_ATTN_Q = "dec.blk.{}.attn_q",
        .DEC_ATTN_K = "dec.blk.{}.attn_k",
        .DEC_ATTN_V = "dec.blk.{}.attn_v",
        .DEC_ATTN_OUT = "dec.blk.{}.attn_o",
        .DEC_ATTN_REL_B = "dec.blk.{}.attn_rel_b",
        .DEC_CROSS_ATTN_NORM = "dec.blk.{}.cross_attn_norm",
        .DEC_CROSS_ATTN_Q = "dec.blk.{}.cross_attn_q",
        .DEC_CROSS_ATTN_K = "dec.blk.{}.cross_attn_k",
        .DEC_CROSS_ATTN_V = "dec.blk.{}.cross_attn_v",
        .DEC_CROSS_ATTN_OUT = "dec.blk.{}.cross_attn_o",
        .DEC_CROSS_ATTN_REL_B = "dec.blk.{}.cross_attn_rel_b",
        .DEC_FFN_NORM = "dec.blk.{}.ffn_norm",
        .DEC_FFN_GATE = "dec.blk.{}.ffn_gate",
        .DEC_FFN_DOWN = "dec.blk.{}.ffn_down",
        .DEC_FFN_UP = "dec.blk.{}.ffn_up",
        .DEC_OUTPUT_NORM = "dec.output_norm",
        .ENC_ATTN_NORM = "enc.blk.{}.attn_norm",
        .ENC_ATTN_Q = "enc.blk.{}.attn_q",
        .ENC_ATTN_K = "enc.blk.{}.attn_k",
        .ENC_ATTN_V = "enc.blk.{}.attn_v",
        .ENC_ATTN_OUT = "enc.blk.{}.attn_o",
        .ENC_ATTN_REL_B = "enc.blk.{}.attn_rel_b",
        .ENC_FFN_NORM = "enc.blk.{}.ffn_norm",
        .ENC_FFN_GATE = "enc.blk.{}.ffn_gate",
        .ENC_FFN_DOWN = "enc.blk.{}.ffn_down",
        .ENC_FFN_UP = "enc.blk.{}.ffn_up",
        .ENC_OUTPUT_NORM = "enc.output_norm",
        .CLS = "cls",
        .CLS_OUT = "cls.output",
        .CONV1D = "conv1d",
        .CONVNEXT_DW = "convnext.{}.dw",
        .CONVNEXT_NORM = "convnext.{}.norm",
        .CONVNEXT_PW1 = "convnext.{}.pw1",
        .CONVNEXT_PW2 = "convnext.{}.pw2",
        .CONVNEXT_GAMMA = "convnext.{}.gamma",
        .POSNET_CONV1 = "posnet.{}.conv1",
        .POSNET_CONV2 = "posnet.{}.conv2",
        .POSNET_NORM = "posnet.{}.norm",
        .POSNET_NORM1 = "posnet.{}.norm1",
        .POSNET_NORM2 = "posnet.{}.norm2",
        .POSNET_ATTN_NORM = "posnet.{}.attn_norm",
        .POSNET_ATTN_Q = "posnet.{}.attn_q",
        .POSNET_ATTN_K = "posnet.{}.attn_k",
        .POSNET_ATTN_V = "posnet.{}.attn_v",
        .POSNET_ATTN_OUT = "posnet.{}.attn_output",
    });

    pub fn get(tensor: ModelTensor) []const u8 {
        return map.get(tensor).?;
    }
};

pub const ModelTensorsByArch = struct {
    pub const TensorList = []const ModelTensor;

    pub const map = std.enums.EnumMap(ModelArch, TensorList).init(.{
        .LLAMA = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ROPE_FREQS,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .ATTN_ROT_EMBD,
            .FFN_GATE_INP,
            .FFN_NORM,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
            .FFN_GATE_EXP,
            .FFN_DOWN_EXP,
            .FFN_UP_EXP,
        },
        .DECI = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ROPE_FREQS,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .ATTN_ROT_EMBD,
            .FFN_GATE_INP,
            .FFN_NORM,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
            .FFN_GATE_EXP,
            .FFN_DOWN_EXP,
            .FFN_UP_EXP,
        },
        .GROK = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ROPE_FREQS,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .ATTN_ROT_EMBD,
            .ATTN_OUT_NORM,
            .FFN_GATE_INP,
            .FFN_NORM,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
            .FFN_GATE_EXP,
            .FFN_DOWN_EXP,
            .FFN_UP_EXP,
            .LAYER_OUT_NORM,
        },
        .GPTNEOX = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ATTN_NORM,
            .ATTN_QKV,
            .ATTN_OUT,
            .FFN_NORM,
            .FFN_DOWN,
            .FFN_UP,
        },
        .FALCON = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ATTN_NORM,
            .ATTN_NORM_2,
            .ATTN_QKV,
            .ATTN_OUT,
            .FFN_DOWN,
            .FFN_UP,
        },
        .BAICHUAN = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ROPE_FREQS,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .ATTN_ROT_EMBD,
            .FFN_NORM,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
        },
        .STARCODER = &[_]ModelTensor{
            .TOKEN_EMBD,
            .POS_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ATTN_NORM,
            .ATTN_QKV,
            .ATTN_OUT,
            .FFN_NORM,
            .FFN_DOWN,
            .FFN_UP,
        },
        .BERT = &[_]ModelTensor{
            .TOKEN_EMBD,
            .TOKEN_EMBD_NORM,
            .TOKEN_TYPES,
            .POS_EMBD,
            .OUTPUT_NORM,
            .ATTN_OUT_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .FFN_DOWN,
            .FFN_UP,
            .LAYER_OUT_NORM,
            .CLS,
            .CLS_OUT,
        },
        .NOMIC_BERT = &[_]ModelTensor{
            .TOKEN_EMBD,
            .TOKEN_EMBD_NORM,
            .TOKEN_TYPES,
            .POS_EMBD,
            .OUTPUT_NORM,
            .ATTN_OUT_NORM,
            .ATTN_QKV,
            .ATTN_OUT,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
            .LAYER_OUT_NORM,
        },
        .JINA_BERT_V2 = &[_]ModelTensor{
            .TOKEN_EMBD,
            .TOKEN_EMBD_NORM,
            .TOKEN_TYPES,
            .ATTN_NORM_2,
            .ATTN_OUT_NORM,
            .ATTN_Q,
            .ATTN_Q_NORM,
            .ATTN_K,
            .ATTN_K_NORM,
            .ATTN_V,
            .ATTN_OUT,
            .FFN_UP,
            .FFN_GATE,
            .FFN_DOWN,
            .LAYER_OUT_NORM,
            .CLS,
        },
        .MPT = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ATTN_NORM,
            .ATTN_QKV,
            .ATTN_OUT,
            .FFN_NORM,
            .FFN_DOWN,
            .FFN_UP,
            .FFN_ACT,
            .ATTN_Q_NORM,
            .ATTN_K_NORM,
            .POS_EMBD,
        },
        .GPTJ = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .FFN_DOWN,
            .FFN_UP,
        },
        .REFACT = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .FFN_NORM,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
        },
        .BLOOM = &[_]ModelTensor{
            .TOKEN_EMBD,
            .TOKEN_EMBD_NORM,
            .OUTPUT_NORM,
            .OUTPUT,
            .ATTN_NORM,
            .ATTN_QKV,
            .ATTN_OUT,
            .FFN_NORM,
            .FFN_DOWN,
            .FFN_UP,
        },
        .STABLELM = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ROPE_FREQS,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .FFN_NORM,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
            .ATTN_Q_NORM,
            .ATTN_K_NORM,
        },
        .QWEN = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ROPE_FREQS,
            .ATTN_NORM,
            .ATTN_QKV,
            .ATTN_OUT,
            .ATTN_ROT_EMBD,
            .FFN_NORM,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
        },
        .QWEN2 = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ROPE_FREQS,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .FFN_NORM,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
        },
        .QWEN2VL = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .FFN_NORM,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
        },
        .QWEN2MOE = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .FFN_NORM,
            .FFN_GATE_INP,
            .FFN_GATE_EXP,
            .FFN_DOWN_EXP,
            .FFN_UP_EXP,
            .FFN_GATE_INP_SHEXP,
            .FFN_GATE_SHEXP,
            .FFN_DOWN_SHEXP,
            .FFN_UP_SHEXP,
        },
        .PLAMO = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ROPE_FREQS,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .ATTN_ROT_EMBD,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
        },
        .GPT2 = &[_]ModelTensor{
            .TOKEN_EMBD,
            .POS_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ATTN_NORM,
            .ATTN_QKV,
            .ATTN_OUT,
            .FFN_NORM,
            .FFN_DOWN,
            .FFN_UP,
        },
        .PHI2 = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ATTN_NORM,
            .ATTN_QKV,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .FFN_NORM,
            .FFN_DOWN,
            .FFN_UP,
        },
        .PHI3 = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ROPE_FACTORS_LONG,
            .ROPE_FACTORS_SHORT,
            .ATTN_NORM,
            .ATTN_QKV,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .FFN_NORM,
            .FFN_DOWN,
            .FFN_UP,
        },
        .CODESHELL = &[_]ModelTensor{
            .TOKEN_EMBD,
            .POS_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ATTN_NORM,
            .ATTN_QKV,
            .ATTN_OUT,
            .ATTN_ROT_EMBD,
            .FFN_NORM,
            .FFN_DOWN,
            .FFN_UP,
        },
        .ORION = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ROPE_FREQS,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .ATTN_ROT_EMBD,
            .FFN_NORM,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
        },
        .INTERNLM2 = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .ATTN_ROT_EMBD,
            .FFN_NORM,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
        },
        .MINICPM = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT,
            .OUTPUT_NORM,
            .ROPE_FREQS,
            .ROPE_FACTORS_LONG,
            .ROPE_FACTORS_SHORT,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .ATTN_ROT_EMBD,
            .FFN_GATE_INP,
            .FFN_NORM,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
            .FFN_GATE_EXP,
            .FFN_DOWN_EXP,
            .FFN_UP_EXP,
        },
        .MINICPM3 = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ROPE_FACTORS_LONG,
            .ROPE_FACTORS_SHORT,
            .ATTN_NORM,
            .ATTN_Q_A,
            .ATTN_Q_B,
            .ATTN_KV_A_MQA,
            .ATTN_KV_B,
            .ATTN_Q_A_NORM,
            .ATTN_KV_A_NORM,
            .ATTN_OUT,
            .FFN_NORM,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
        },
        .GEMMA = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
            .FFN_NORM,
        },
        .GEMMA2 = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
            .ATTN_NORM,
            .ATTN_POST_NORM,
            .FFN_PRE_NORM,
            .FFN_POST_NORM,
        },
        .GEMMA3 = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT,
            .OUTPUT_NORM,
            .ATTN_Q,
            .ATTN_Q_NORM,
            .ATTN_K,
            .ATTN_K_NORM,
            .ATTN_V,
            .ATTN_OUT,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
            .ATTN_NORM,
            .ATTN_POST_NORM,
            .FFN_PRE_NORM,
            .FFN_POST_NORM,
        },
        .STARCODER2 = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ROPE_FREQS,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .ATTN_ROT_EMBD,
            .FFN_NORM,
            .FFN_DOWN,
            .FFN_UP,
        },
        .RWKV6 = &[_]ModelTensor{
            .TOKEN_EMBD,
            .TOKEN_EMBD_NORM,
            .OUTPUT_NORM,
            .OUTPUT,
            .ATTN_NORM,
            .ATTN_NORM_2,
            .TIME_MIX_W1,
            .TIME_MIX_W2,
            .TIME_MIX_LERP_X,
            .TIME_MIX_LERP_K,
            .TIME_MIX_LERP_V,
            .TIME_MIX_LERP_R,
            .TIME_MIX_LERP_G,
            .TIME_MIX_LERP_W,
            .TIME_MIX_FIRST,
            .TIME_MIX_DECAY,
            .TIME_MIX_DECAY_W1,
            .TIME_MIX_DECAY_W2,
            .TIME_MIX_KEY,
            .TIME_MIX_VALUE,
            .TIME_MIX_RECEPTANCE,
            .TIME_MIX_GATE,
            .TIME_MIX_LN,
            .TIME_MIX_OUTPUT,
            .CHANNEL_MIX_LERP_K,
            .CHANNEL_MIX_LERP_R,
            .CHANNEL_MIX_KEY,
            .CHANNEL_MIX_RECEPTANCE,
            .CHANNEL_MIX_VALUE,
        },
        .MAMBA = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ATTN_NORM,
            .SSM_IN,
            .SSM_CONV1D,
            .SSM_X,
            .SSM_DT,
            .SSM_A,
            .SSM_D,
            .SSM_OUT,
        },
        .XVERSE = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ROPE_FREQS,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .ATTN_ROT_EMBD,
            .FFN_NORM,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
        },
        .COMMAND_R = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
            .ATTN_K_NORM,
            .ATTN_Q_NORM,
        },
        .COHERE2 = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
        },
        .DBRX = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ATTN_NORM,
            .ATTN_QKV,
            .ATTN_OUT,
            .ATTN_OUT_NORM,
            .FFN_GATE_INP,
            .FFN_GATE_EXP,
            .FFN_DOWN_EXP,
            .FFN_UP_EXP,
        },
        .OLMO = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
        },
        .OLMO2 = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .ATTN_POST_NORM,
            .ATTN_Q_NORM,
            .ATTN_K_NORM,
            .FFN_POST_NORM,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
        },
        .OLMOE = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ATTN_OUT,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_NORM,
            .ATTN_Q_NORM,
            .ATTN_K_NORM,
            .FFN_NORM,
            .FFN_GATE_INP,
            .FFN_GATE_EXP,
            .FFN_UP_EXP,
            .FFN_DOWN_EXP,
        },
        .OPENELM = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .ATTN_NORM,
            .ATTN_QKV,
            .ATTN_Q_NORM,
            .ATTN_K_NORM,
            .ATTN_OUT,
            .FFN_NORM,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
        },
        .ARCTIC = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ROPE_FREQS,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .ATTN_ROT_EMBD,
            .FFN_GATE_INP,
            .FFN_NORM,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
            .FFN_NORM_EXP,
            .FFN_GATE_EXP,
            .FFN_DOWN_EXP,
            .FFN_UP_EXP,
        },
        .DEEPSEEK = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ROPE_FREQS,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .ATTN_ROT_EMBD,
            .FFN_GATE_INP,
            .FFN_NORM,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
            .FFN_GATE_EXP,
            .FFN_DOWN_EXP,
            .FFN_UP_EXP,
            .FFN_GATE_SHEXP,
            .FFN_DOWN_SHEXP,
            .FFN_UP_SHEXP,
        },
        .DEEPSEEK2 = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ROPE_FREQS,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_Q_A,
            .ATTN_Q_B,
            .ATTN_KV_A_MQA,
            .ATTN_KV_B,
            .ATTN_Q_A_NORM,
            .ATTN_KV_A_NORM,
            .ATTN_OUT,
            .ATTN_ROT_EMBD,
            .FFN_GATE_INP,
            .FFN_NORM,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
            .FFN_GATE_EXP,
            .FFN_DOWN_EXP,
            .FFN_UP_EXP,
            .FFN_GATE_SHEXP,
            .FFN_DOWN_SHEXP,
            .FFN_UP_SHEXP,
            .FFN_EXP_PROBS_B,
        },
        .CHATGLM = &[_]ModelTensor{
            .TOKEN_EMBD,
            .ROPE_FREQS,
            .OUTPUT_NORM,
            .OUTPUT,
            .ATTN_NORM,
            .ATTN_QKV,
            .ATTN_OUT,
            .FFN_NORM,
            .FFN_DOWN,
            .FFN_UP,
        },
        .BITNET = &[_]ModelTensor{
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .ATTN_NORM,
            .ATTN_OUT,
            .FFN_NORM,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
            .ATTN_SUB_NORM,
            .FFN_SUB_NORM,
        },
        .T5 = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT,
            .DEC_ATTN_NORM,
            .DEC_ATTN_Q,
            .DEC_ATTN_K,
            .DEC_ATTN_V,
            .DEC_ATTN_OUT,
            .DEC_ATTN_REL_B,
            .DEC_CROSS_ATTN_NORM,
            .DEC_CROSS_ATTN_Q,
            .DEC_CROSS_ATTN_K,
            .DEC_CROSS_ATTN_V,
            .DEC_CROSS_ATTN_OUT,
            .DEC_CROSS_ATTN_REL_B,
            .DEC_FFN_NORM,
            .DEC_FFN_GATE,
            .DEC_FFN_DOWN,
            .DEC_FFN_UP,
            .DEC_OUTPUT_NORM,
            .ENC_ATTN_NORM,
            .ENC_ATTN_Q,
            .ENC_ATTN_K,
            .ENC_ATTN_V,
            .ENC_ATTN_OUT,
            .ENC_ATTN_REL_B,
            .ENC_FFN_NORM,
            .ENC_FFN_GATE,
            .ENC_FFN_DOWN,
            .ENC_FFN_UP,
            .ENC_OUTPUT_NORM,
        },
        .T5ENCODER = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT,
            .ENC_ATTN_NORM,
            .ENC_ATTN_Q,
            .ENC_ATTN_K,
            .ENC_ATTN_V,
            .ENC_ATTN_OUT,
            .ENC_ATTN_REL_B,
            .ENC_FFN_NORM,
            .ENC_FFN_GATE,
            .ENC_FFN_DOWN,
            .ENC_FFN_UP,
            .ENC_OUTPUT_NORM,
        },
        .JAIS = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ATTN_NORM,
            .ATTN_QKV,
            .ATTN_OUT,
            .FFN_NORM,
            .FFN_DOWN,
            .FFN_GATE,
            .FFN_UP,
        },
        .NEMOTRON = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ROPE_FREQS,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .ATTN_ROT_EMBD,
            .FFN_NORM,
            .FFN_DOWN,
            .FFN_UP,
        },
        .EXAONE = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ROPE_FREQS,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .ATTN_ROT_EMBD,
            .FFN_NORM,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
        },
        .GRANITE = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .FFN_NORM,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
        },
        .GRANITE_MOE = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_K,
            .ATTN_V,
            .ATTN_OUT,
            .FFN_NORM,
            .FFN_GATE_INP,
            .FFN_GATE_EXP,
            .FFN_DOWN_EXP,
            .FFN_UP_EXP,
        },
        .CHAMELEON = &[_]ModelTensor{
            .TOKEN_EMBD,
            .OUTPUT_NORM,
            .OUTPUT,
            .ATTN_NORM,
            .ATTN_Q,
            .ATTN_Q_NORM,
            .ATTN_K,
            .ATTN_K_NORM,
            .ATTN_V,
            .ATTN_OUT,
            .FFN_NORM,
            .FFN_GATE,
            .FFN_DOWN,
            .FFN_UP,
        },
        .WAVTOKENIZER_DEC = &[_]ModelTensor{
            .TOKEN_EMBD,
            .TOKEN_EMBD_NORM,
            .CONV1D,
            .CONVNEXT_DW,
            .CONVNEXT_NORM,
            .CONVNEXT_PW1,
            .CONVNEXT_PW2,
            .CONVNEXT_GAMMA,
            .OUTPUT,
            .OUTPUT_NORM,
            .POSNET_CONV1,
            .POSNET_CONV2,
            .POSNET_NORM,
            .POSNET_NORM1,
            .POSNET_NORM2,
            .POSNET_ATTN_NORM,
            .POSNET_ATTN_Q,
            .POSNET_ATTN_K,
            .POSNET_ATTN_V,
            .POSNET_ATTN_OUT,
        },
    });

    pub fn get(arch: ModelArch) TensorList {
        return map.get(arch).?;
    }

    pub fn searchTensor(self: ModelTensorsByArch, arch: ModelArch, tensor: ModelTensor) !ModelTensor {
        const tensors = self.get(arch);
        for (tensors) |arch_tensor| {
            if (arch_tensor == tensor) {
                return arch_tensor;
            }
        }
        return error.TensorNotFound;
    }
};
